
                             getmail documentation
                                       
   This is the documentation for getmail version 4. Version 4 includes
   numerous changes from version 3.x; if you are using getmail version 3,
   please refer to the documentation for that version.
   
   getmail is Copyright © 1998-2004 Charles Cazabon.
   
   getmail is licensed under the GNU General Public License version 2
   (only). If you wish to obtain a license to use getmail under other
   terms, please contact me directly.
   
Table of contents

   Table of contents goes here
   
Features

   getmail is a mail retriever designed to allow you to get your mail
   from one or more mail accounts on various mail servers to your local
   machine for reading with a minimum of fuss. getmail is designed to be
   secure, flexible, reliable, and easy-to-use. getmail is designed to
   replace other mail retrievers such as fetchmail.
   
   getmail version 4 includes the following features:
     * simple to install, configure, and use
     * retrieve virtually any mail
          + support for accessing mailboxes with the following protocols:
               o POP3
               o POP3-over-SSL
               o IMAP4
               o IMAP4-over-SSL
               o SPDS (Demon UK's extensions to POP3)
          + support for single-user and domain mailboxes
          + retrieve mail from an unlimited number of mailboxes and
            servers
          + can remember which mail it has already retrieved, and can be
            set to only download new messages
     * support for message filtering, classification, and annotation by
       external programs like spam filters and anti-virus programs
     * support for delivering messages to different destinations based on
       the message recipient
     * reliability
          + native safe and reliable delivery support for maildirs and
            mboxrd files, in addition to delivery through arbitrary
            external message delivery agents (MDAs)
          + does not destroy information by rewriting mail headers
          + does not cause mail loops by doing SMTP injection, and
            therefore does not require that you run an MTA (like qmail or
            sendmail) on your host
     * written in Python, and therefore easy to extend or customize
          + a flexible, extensible architecture so that support for new
            mail access protocols, message filtering operations, or
            destination types can be easily added
          + cross-platform operation; getmail 4 should work on
            Unix/Linux, Macintosh, Windows, and other platforms
     * winner of various software awards, including DaveCentral's "Best
       of Linux"
       
Differences from previous versions

   getmail version 4 has been completely rewritten. It is designed to
   closely mimic the interface and user experience of getmail version 3,
   but the new architecture necessitates some differences you will
   notice:
     * the getmail rc file (configuration file) format has changed. If
       you are upgrading from version 3, you will need to write a new
       configuration file based on the contents of your old one. The new
       file format closely resembles the old in many ways. Each account
       you retrieve mail from will require a separate rc file, but
       getmail can operate with several rc files simultaneously.
     * support for protocols other than POP3/SPDS. IMAP support is now
       included, and other protocols can be added with relative ease.
     * support for SSL-encrypted protocols. Both POP3 and IMAP feature
       SSL support.
     * messages can be filtered or annotated by external programs like
       spam filters and anti-Microsoft-worm programs. Filters can cause
       messages to be dropped completely.
     * a flexible, extensible architecture. Additional classes for
       handling new mail protocols, filter types, or destination
       mailstores can be added without needing to modify the main script
       at all.
       
Requirements

   getmail version 4 requires Python version 2.3.3 or later. If you have
   only an earlier version of Python available, you can install the
   latest version without disturbing your current version, or use getmail
   version 3, which requires only Python version 1.5.2 or later.
   
Obtaining getmail

   Download here ...
   
Installing getmail

   Installation instructions here ...
   
Configuring getmail

   Once getmail is installed, you need to configure it before you can
   retrieve mail with it. Follow these steps:
    1. Create a data/configuration directory. The default is
       $HOME/.getmail/. If you choose a different location, you will need
       to specify it on the getmail command line. In general, other users
       should not be able to read the contents of this directory, so you
       should set the permissions on it appropriately.
mkdir -m 0700 $HOME/.getmail
foobar

    2. Create a configuration file in the configuration/data directory.
       The default name is getmailrc. If you choose a different filename,
       you will need to specify it on the getmail command line. If you
       want to retrieve mail from more than one mail account, you will
       need to create a separate rc file for each account getmail should
       retrieve mail from.
       
  Creating a getmail rc file
  
   The configuration file format is designed to be easy to understand
   (both for getmail, and for the user). It is broken down into small
   sections of related parameters by section headers which appear on
   lines by themselves, enclosed in square brackets, like this:
[section name]

   Each section contains a series of parameters, declared as follows:
parameter_name = parameter_value

   A parameter value, if necessary, can span multiple lines. To indicate
   that the second and subsequent lines form a continuation of the
   previous line, they need to begin with leading whitespace, like this:
first_parameter = value
    first parameter value continues here
second_parameter = value

   You can annotate your configuration files with comments by putting
   them on lines which begin with a pound sign, like this:
first_parameter = value
# I chose this value because of etc.
second_parameter = value

   Each rc file requires at least two specific sections. The first is
   retriever, which tells getmail about the mail account to retrieve
   messages from. The second is destination, which tells getmail what to
   do with the retrieved messages. There is also an optional section
   named options, which gives getmail general configuration information
   (such as whether to log its actions to a file), and other sections can
   be used to tell getmail to filter retrieved messages through other
   programs, or to deliver messages for particular users in a particular
   way.
   
    Parameter types and formats
    
   Several different types of parameters are used in getmail rc files:
     * string
     * integer
     * boolean
     * tuple of quoted strings
     * tuple of integers
       
   Each parameter type has a specific format that must be used to
   represent it in the getmail rc file. They are explained below. Each
   parameter documented later specifies its type explicitly.
   
      string
      
   Specify a string parameter value with no special syntax:
    parameter = my value

      integer
      
   Specify an integer parameter value with no special syntax:
    parameter = 4150

      boolean
      
   A boolean parameter is true or false; you can specify its value with
   the (case-insensitive) words "true" and "false". The values "yes",
   "on" and 1 are accepted as equivalent to "true", while values "no",
   "off" and 0 are accepted as equivalent to "false". Some examples:
    parameter = True
    parameter = false
    parameter = NO
    parameter = 1

      tuple of quoted strings
      
   A tuple of quoted strings is essentially a list of strings, with each
   string surrounded by matching double- or single-quote characters to
   indicate where it begins and ends. The list must be surrounded by
   open- and close-parenthesis characters. A tuple may have to be a
   specific number of strings; for instance, a "2-tuple" must consist of
   two quoted strings, while a "4-tuple" must have exactly four. In most
   cases, the number of strings is not required to be a specific number,
   and it will not be specified in this fashion.
   
   In general, a tuple of quoted strings parameter values should look
   like this:
    parameter = ('first string', 'second string',
        "third string that contains a ' character")

   However, tuples of 0 or 1 strings require special treatment. The empty
   tuple is specified with just the open- and close-parenthesis
   characters:
    parameter = ()

   A tuple containing a single quoted string requires a comma to indicate
   it is a tuple:
    parameter = ("single string", )

      tuple of integers
      
   This is very similar to a tuple of quoted strings, above, minus the
   quotes. Some examples:
    parameter = (1, 2, 3, 4, 5)
    parameter = (37, )
    parameter = ()

    Creating the [retriever] section
    
   The retriever section of the rc file tells getmail what mail account
   to retrieve mail from, and how to access that account. Begin with the
   section header line as follows:
[retriever]

   Then, include a type parameter to tell getmail what type of mail
   retriever to use to retrieve mail from this account. The possible
   values are:
     * SimplePOP3Retriever -- for single-user POP3 mail accounts.
     * SimpleIMAPRetriever -- for single-user IMAP mail accounts.
     * SimplePOP3SSLRetriever -- same as SimplePOP3Retriever, but uses
       SSL encryption.
     * SimpleIMAPSSLRetriever -- same as SimpleIMAPRetriever, but uses
       SSL encryption.
     * MultidropPOP3Retriever -- for domain mailbox POP3 mail accounts.
     * MultidropPOP3SSLRetriever -- same as MultidropPOP3Retriever, but
       uses SSL encryption.
     * MultidropSPDSRetriever -- for domain mailbox SPDS mail accounts,
       as provided by the UK ISP Demon.
     * MultidropIMAPRetriever -- for domain mailbox IMAP mail accounts.
     * MultidropIMAPSSLRetriever -- same as MultidropIMAPRetriever, but
       uses SSL encryption.
       
   If you're not sure which to use, you probably want SimplePOP3Retriever
   (for POP3 mail accounts) or SimpleIMAPRetriever (for IMAP mail
   accounts).
   
   Specify the mail account type with one of the above values, like this:
type = typename

   Then, include lines for any parameters and their values which are
   required by the retriever. The parameters and their types are
   documented below.
   
      Common retriever parameters
      
   All retriever types take several common required parameters:
     * server (string) -- the name or IP address of the server to
       retrieve mail from
     * username (string) -- username to provide when logging in to the
       mail server
       
   All retriever types also take several optional parameters:
     * port (integer) -- the TCP port number to connect to. If not
       provided, the default is a port appropriate for the protocol (110
       for POP3, etc.)
     * password (string) -- password to use when logging in to the mail
       server. If not provided, getmail will prompt you to enter the
       password when run.
       
      SimplePOP3Retriever
      
   The SimplePOP3Retriever class takes the common retriever parameters
   above, plus the following optional parameter:
     * use_apop (boolean) -- if set to True, getmail will use APOP-style
       authentication to log in to the server instead of normal USER/PASS
       authentication. This is not supported by many POP3 servers. The
       default is False.
     * timeout (integer) -- how long (in seconds) to wait for socket
       operations to complete before considering them failed. If not
       specified, the default is 180 seconds. You may need to increase
       this value in particularly poor networking conditions.
       
      SimpleIMAPRetriever
      
   The SimpleIMAPRetriever class takes the common retriever parameters
   above, plus the following optional parameters:
     * timeout (integer) -- see SimplePOP3Retriever for definition.
     * mailboxes (tuple of quoted strings) -- a list of mailbox paths to
       retrieve mail from, expressed as a Python tuple. If not specified,
       the default is to retrieve mail from the mail folder named INBOX.
       You might want to retrieve messages from several different mail
       folders, using a configuration like this:
mailboxes = ("INBOX", "INBOX.spam",
    "mailing-lists.model-railroading")

     * move_on_delete (string) -- if set, messages are moved to the named
       mail folder before being deleted from their original location.
       Note that if you configure getmail not to delete retrieved
       messages (the default behaviour), they will not be moved at all.
       
      SimplePOP3SSLRetriever
      
   The SimplePOP3SSLRetriever class takes the common retriever parameters
   above, plus the following optional parameters:
     * use_apop (boolean) -- see SimplePOP3Retriever for definition.
     * keyfile (string) -- use the specified PEM-formatted key file in
       the SSL negotiation. Note that no certificate or key validation is
       done.
     * certfile (string) -- use the specified PEM-formatted certificate
       file in the SSL negotiation. Note that no certificate or key
       validation is done.
       
      SimpleIMAPSSLRetriever
      
   The SimpleIMAPSSLRetriever class takes the common retriever parameters
   above, plus the following optional parameters:
     * mailboxes (tuple of quoted strings) -- see SimpleIMAPRetriever for
       definition.
     * move_on_delete (string) -- see SimpleIMAPRetriever for definition.
     * keyfile (string) -- see SimplePOP3SSLRetriever for definition.
     * certfile (string) -- see SimplePOP3SSLRetriever for definition.
       
      MultidropPOP3Retriever
      
   The MultidropPOP3Retriever class takes the common retriever parameters
   above, plus the following required parameter:
     * envelope_recipient (string) -- the name and position of the header
       field which records the envelope recipient address. This is set to
       a value of the form field_name : field_position . The first
       (topmost) Delivered-To: header field would be specified as:
envelope_recipient = delivered-to:1

   The MultidropPOP3Retriever also takes the following optional
   parameters:
     * use_apop (boolean) -- see SimplePOP3Retriever for definition.
     * timeout (integer) -- see SimplePOP3Retriever for definition.
       
      MultidropPOP3SSLRetriever
      
   The MultidropPOP3SSLRetriever class takes the common retriever
   parameters above, plus the following required parameter:
     * envelope_recipient (string) -- see MultidropPOP3Retriever for
       definition.
       
   The MultidropPOP3SSLRetriever class alo takes the following optional
   parameters:
     * use_apop (boolean) -- see SimplePOP3Retriever for definition.
     * keyfile (string) -- see SimplePOP3SSLRetriever for definition.
     * certfile (string) -- see SimplePOP3SSLRetriever for definition.
       
      MultidropSPDSRetriever
      
   The MultidropSPDSRetriever class takes the common retriever parameters
   above, plus the following optional parameters:
     * timeout (integer) -- see SimplePOP3Retriever for definition.
       
      MultidropIMAPRetriever
      
   The MultidropIMAPRetriever class takes the common retriever parameters
   above, plus the following required parameter:
     * envelope_recipient (string) -- see MultidropPOP3Retriever for
       definition.
       
   The MultidropIMAPRetriever class also takes the following optional
   parameters:
     * timeout (integer) -- see SimplePOP3Retriever for definition.
     * mailboxes (tuple of quoted strings) -- see SimpleIMAPRetriever for
       definition.
     * move_on_delete (string) -- see SimpleIMAPRetriever for definition.
       
      MultidropIMAPSSLRetriever
      
   The MultidropIMAPSSLRetriever class takes the common retriever
   parameters above, plus the following required parameter:
     * envelope_recipient (string) -- see MultidropPOP3Retriever for
       definition.
       
   The MultidropIMAPSSLRetriever class also takes following optional
   parameters:
     * mailboxes (tuple of quoted strings) -- see SimpleIMAPRetriever for
       definition.
     * move_on_delete (string) -- see SimpleIMAPRetriever for definition.
     * keyfile (string) -- see SimplePOP3SSLRetriever for definition.
     * certfile (string) -- see SimplePOP3SSLRetriever for definition.
       
    Retriever examples
    
   A typical POP3 mail account (the basic kind of mailbox provided by
   most internet service providers (ISPs)) would use a retriever
   configuration like this:
[retriever]
type = SimplePOP3Retriever
server = popmail.isp.example.net
username = account_name
password = my_mail_password

   If your ISP provides POP3 access on a non-standard port number, you
   would need to include the port parameter:
[retriever]
type = SimplePOP3Retriever
server = popmail.isp.example.net
port = 8110
username = account_name
password = my_mail_password

   If your ISP provides POP3-over-SSL and you wanted to use that, your
   retriever configuration might look like this:
[retriever]
type = SimplePOP3SSLRetriever
server = popmail.isp.example.net
username = account_name
password = my_mail_password

   If you have an IMAP mail account and want to retrieve messages from
   several mail folders under that account, and you want to move messages
   to a special folder when deleting them, you would use a retriever
   configuration like this:
[retriever]
type = SimpleIMAPRetriever
server = imapmail.isp.example.net
username = account_name
password = my_mail_password
mailboxes = ("INBOX", "lists.unix", "lists.getmail")
move_on_delete = mail.deleted

   If you are retrieving your company's mail from a domain POP3 mailbox
   for delivery to multiple local users, you might use a retriever
   configuration like this:
[retriever]
type = MultidropPOP3Retriever
server = imapmail.isp.example.net
username = account_name
password = company_maildrop_password
envelope_recipient = delivered-to:1

    Creating the [destination] section
    
   The destination section of the rc file tells getmail what to do with
   retrieved messages. Begin with the section header line as follows:
[destination]

   Then, include a type string parameter to tell getmail what type of
   mail destination this is. The possible values are:
     * Maildir -- deliver all messages to a local qmail-style maildir
     * Mboxrd -- deliver all messages to a local mboxrd-format mbox file
       with fcntl-type locking.
     * MDA_external -- use an external message delivery agent (MDA) to
       deliver messages. Typical MDAs include maildrop, procmail, and
       others.
     * MultiSorter -- sort messages according to the envelope recipient
       (requires a domain mailbox retriever) and deliver to a variety of
       maildirs, mbox files, external MDAs, or other destinations based
       on regular expressions matching the recipient address of each
       message. Messages not matching any of the regular expressions are
       delivered to a default "postmaster" destination.
     * MDA_qmaillocal -- use qmail-local to deliver messages according to
       instructions in a .qmail file.
       
      Maildir
      
   The Maildir destination delivers to a qmail-style maildir. If getmail
   has sufficient permission, it will ensure that the files it creates in
   the maildir are owned by the owner of the maildir.
   
   The Maildir destination takes one parameter:
     * path (string) -- the path to the maildir, ending in slash (/).
       This value will be expanded for leading ~ or ~USER. You might want
       to deliver messages to a maildir named Maildir in your home
       directory; you could do this with a configuration like this:
[destination]
type = Maildir
path = ~/Maildir/

      Mboxrd
      
   The Mboxrd destination delivers to an mboxrd-format mbox file with
   fcntl-type file locking. If the file already exists, getmail will
   ensure that it appears to be a valid mboxrd file before trying to
   deliver to it. Otherwise, the file will be created. If getmail has
   sufficient permission, it will ensure that the file is owned by the
   owner of the directory containing the file.
   
   You should ensure that all other programs accessing any the mbox file
   expect mboxrd-format mbox files and fcntl-type file locking; failure
   to do so can cause mbox corruption. Note that delivering to mbox files
   over NFS can be unreliable and should be avoided; this is the case
   with any MDA.
   
   The Mboxrd destination takes one parameter:
     * path (string) -- the path to the mbox file. This value will be
       expanded for leading ~ or ~USER. You might want to deliver
       messages to an mbox file named inbox in your home directory; you
       could do this with a configuration like this:
[destination]
type = Mboxrd
path = ~/inbox

      MDA_external
      
   MDA_external delivers messages by running an external program (known
   as a message delivery agent, or MDA). Some typical MDAs include
   maildrop and procmail.
   
   The MDA_external destination takes one required parameter:
     * path (string) -- the path to the command to run. This value will
       be expanded for leading ~ or ~USER.
       
   The MDA_external destination also takes several optional parameters:
     * arguments (tuple of quoted strings) -- arguments to be supplied to
       the command. The following substrings will be substituted with the
       equivalent values from the message, if availble:
          + %(sender) -- envelope return-path address
          + %(recipient) -- envelope recipient address
          + %(local) -- local-part of the envelope recipient address
          + %(domain) -- domain-part of the envelope recipient address
       The default value is (), so no arguments are supplied to the
       command.
     * unixfrom (boolean) -- whether to include a Unix-style mbox From_
       line at the beginning of the message supplied to the command.
       Defaults to false.
     * user (string) -- if supplied, getmail will change the effective
       UID to that of the named user. Note that this typically requires
       root privileges.
     * group (string) -- if supplied, getmail will change the effective
       GID to that of the named group. Note that this typically requires
       root privileges.
     * allow_root_commands (boolean) -- if set, getmail will run external
       commands even if it is currently running with root privileges. The
       default is false, which causes getmail to raise an exception if it
       is asked to run an external command as root. Note that setting
       this option has serious security implications. Don't use it if you
       don't know what you're doing.
       
   A basic invocation of an external MDA might look like this:
[destination]
type = MDA_external
path = /path/to/mymda
arguments = ("--log-errors", )

   Something more complex might look like this:
[destination]
type = MDA_external
path = /path/to/mymda
# Switch to fred's UID and the mail group GID before delivering his mail
user = fred
group = mail
arguments = ("--strip-forbidden-attachments", "--recipient=%(recipient)")

      MultiSorter
      
   MultiSorter compares the envelope recipient address of messages
   against a list of user-supplied regular expressions and delivers the
   message to the destination (maildir, mboxrd file, or other) associated
   with any matching patterns. A message can match multiple patterns and
   therefore be delivered to multiple matching destinations. Any message
   which matches none of the patterns is delivered to a default
   destination for the postmaster.
   
   Because MultiSorter requires the envelope recipient to operate, it
   must be used with a domain mailbox retriever.
   
   The MDA_external destination takes one required parameter:
     * default (string) -- the destination for messages which aren't
       matched by any of the "locals" regular expressions. The
       destination can be a maildir, mboxrd file, or other destination.
       The string is first expanded for leading ~ or ~USER. Then:
          + if the string starts with a dot . or slash /, and ends with a
            slash /, it is assumed to be the path to a maildir
          + if the string starts with a dot . or slash /, and does not
            end with a slash /, it is assumed to be the path to an mboxrd
            file
          + if the string is surrounded by square brackets [ and ], it is
            assumed to be the name of another section in the
            configuration file specifying a destination.
       Some examples:
          + To deliver to a maildir named Maildir in the home directory
            of user jeff:
[destination]
type = MultiSorter
default = ~jeff/Maildir/
          + To deliver to an mboxrd file:
[destination]
type = MultiSorter
default = /var/spool/mail/alice
          + To deliver with an external MDA:
[destination]
type = MultiSorter
default = [procmail-as-bob]

[procmail-as-bob]
type = MDA_external
path = /path/to/procmail
arguments = ('~bob/.procmailrc', )
user = bob
       
   The MultiSorter destination also takes one optional parameter:
     * locals (string) -- one or more regular expression - destination
       pairs, each on a separate line. Messages will be delivered to each
       destination for which the envelope recipient matches the given
       regular expression. The regular expression and destination are
       supplied on the same line and separated by whitespace.
       Destinations are specified in the same manner as with the
       "default" parameter, above.
       
   Note that if you don't understand regular expressions, you don't need
   to worry about it. In general, an email address is a regular
   expression that matches itself. The only significant times this isn't
   the case is when the address contains odd punctuation characters like
   ^, $, or [. Handy hints:
     * the regular expression . (dot) matches anything
     * matches can occur anywhere in the address. If you want to only
       match at the beginning, start your expression with the ^
       character. If you only want to match the whole address, also end
       your expression with a dollar sign $.
       
   Using regular expressions:
     * The regular expression joe@example.org matches the addresses
       joe@example.org, joe@example.org.net, and heyjoe@example.org.
     * The regular expression ^jeff@ matches the addresses
       jeff@example.org and jeff@example.net, but not
       otherjeff@example.org.
     * The regular expression sam matches the addresses sam@example.org,
       samantha@example.org, asam@example.org, and
       chris@isam.example.net.
       
   Some examples:
     *
          + Deliver mail matching jeff@example.net to ~jeff/Maildir/
          + Deliver mail matching alice@anything to ~alice/inbox
          + Deliver all other mail to ~bob/Maildir/
[destination]
type = MultiSorter
default = ~bob/Maildir/
locals =
    jeff@example.net ~jeff/Maildir/
    alice@ ~alice/inbox
     *
          + Deliver mail for jeff, bob, and alice to maildirs in their
            home directories
          + Deliver copies of all messages to samantha's mail archive
          + Deliver copies of all messages to a program that logs certain
            information. This program should run as the user log, and
            command arguments should tell it to record the info to
            /var/log/mail/info
[destination]
type = MultiSorter
default = doesn't matter, this won't be used, as locals will always match
locals =
    ^jeff@ ~jeff/Maildir/
    ^bob@ ~bob/Maildir/
    ^alice@ ~alice/Maildir/
    . ~samantha/Mail/archive/copies/
    . [info]

[info]
type = MDA_external
path = /path/to/infologger
arguments = ('--log=/var/log/mail/info', '--sender=%(sender)', '--recipient=%(r
ecipient))
user = log
       
      MDA_qmaillocal
      
   MDA_qmaillocal delivers messages by running the qmail-local program as
   an external MDA. qmail-local uses .qmail files to tell it what to do
   with messages. If you're not already familiar with qmail, you don't
   need to use this destination class.
   
   The MDA_qmaillocal destination takes several optional parameters:
     * qmaillocal (string) -- path to the qmail-local program. The
       default value is /var/qmail/bin/qmail-local.
     * user (string) -- supplied to qmail-local, and also tells getmail
       to change the current effective UID to that of the named user
       before running qmail-local. Note that this typically requires root
       privileges. The default value is the account name of the current
       effective UID.
     * group (string) -- if supplied, getmail will change the effective
       GID to that of the named group before running qmail-local. Note
       that this typically requires root privileges.
     * homedir (string) -- supplied to qmail-local. The default value is
       the home directory of the account with the current effective UID.
     * localdomain (string) -- supplied to qmail-local as its domain
       argument. The default value is the fully-qualified domain name of
       the local host.
     * defaultdelivery (string) -- supplied to qmail-local as its
       defaultdelivery argument. The default value is ./Maildir/.
     * conf-break (string) -- supplied to qmail-local as its dash
       argument. The default value is -.
     * localpart_translate (2-tuple of quoted strings) -- if supplied,
       the recipient address of the message (which is used to construct
       the local argument (among others) to qmail-local) will have any
       leading instance of the first string replaced with the second
       string. This can be used to remap recipient addresses, trim
       extraneous prefixes (such as the qmail virtualdomain prepend
       value), or perform other tasks. The default value is ('', '')
       (i.e., no translation).
     * strip_delivered_to (boolean) -- if set, Delivered-To: header
       fields will be removed from the message before handing it to
       qmail-local. This may be necessary to prevent qmail-local falsely
       detecting a looping message if (for instance) the system
       retrieving messages otherwise believes it has the same domain name
       as the retrieval server. Inappropriate use, however, may cause
       message loops. The default value is False.
     * allow_root_commands (boolean) -- if set, getmail will run
       qmail-local even if it is currently running with root privileges.
       The default is false, which causes getmail to raise an exception
       if it is asked to run an external command as root. Note that
       setting this option has serious security implications. Don't use
       it if you don't know what you're doing.
       
   A basic invocation of qmail-local might look like this:
[destination]
type = MDA_qmaillocal
user = joyce

   Something more complex might look like this:
[destination]
type = MDA_qmaillocal
user = joyce
# The mail domain isn't the normal FQDN of the server running getmail
localdomain = host.example.net
# Trim the server's virtualdomain prepend value from message recipient before
# sending it to qmail-local
localpart_translate = ('mailhostaccount-', '')

    Creating the [options] section
    
   The options section of the rc file (which is not required) can be used
   to alter getmail's default behaviour. The parameters supported in this
   section are as follows:
     * verbose (boolean) -- if set, getmail prints messages about each of
       its actions. If unset, getmail will only print warnings and
       errors. Default: True.
     * read_all (boolean) -- if set, getmail retrieves all available
       messages. If unset, getmail only retrieves messages it has not
       seen before. Default: True.
     * delete (boolean) -- if set, getmail will delete messages after
       retrieving and successfully delivering them. If unset, getmail
       will leave messages on the server after retrieving them. Default:
       False.
     * delete_after (integer) -- if set, getmail will delete messages
       this number of days after first seeing them, if they have been
       retrieved and delivered. This, in effect, leaves messages on the
       server for a configurable number of days after retrieving them.
       Note that the delete parameter has higher priority; if both are
       set, the messages will be deleted immediately. Default: 0, which
       means not to enable this feature.
     * max_message_size (integer) -- if set, getmail will not retrieve
       messages larger than this number of bytes. Default: 0, which means
       not to enable this feature.
     * max_messages_per_session (integer) -- if set, getmail will process
       a maximum of this number of messages before closing the session
       with the server. This can be useful if your network or the server
       is particuarly unreliable. Default: 0, which means not to enable
       this feature.
     * delivered_to (boolean) -- if set, getmail adds a Delivered-To:
       header field to the message. If unset, it will not do so. Default:
       True.
     * received (boolean) -- if set, getmail adds a Received: header
       field to the message. If unset, it will not do so. Default: True.
     * message_log (string) -- if set, getmail will record a log of its
       actions to the named file. The value will be expanded for leading
       ~ or ~USER. Default: '' (the empty string), which means not to
       enable this feature.
     * message_log_syslog (boolean) -- if set, getmail will record a log
       of its actions using the system logger. Note that syslog is
       inherently unreliable and can lose log messages. Default: False.
       
   The verbose, read_all, and delete parameters can be overridden at run
   time with commandline options.
   
      [options] example
      
   To configure getmail to operate quietly, to retrieve only new mail, to
   delete messages after retrieving them, and to log its actions to a
   file, you could provide the following in your getmail rc file(s):
[options]
verbose = false
read_all = false
delete = true
message_log = ~/.getmail/log

    Creating the [filter-something] sections
    
   The filter-something section(s) of the rc file (which are not
   required) tell getmail to process messages in some way after
   retrieving them, but before delivering them to your destinations.
   Filters can tell getmail to drop a message (i.e. not deliver it at
   all), add information to the message header (i.e. for a
   spam-classification system or similar), or modify message content
   (like an antivirus system stripping suspected MIME parts from
   messages).
   
   You can specify any number of filters; provide a separate rc file
   section for each, naming each of them filter-something. They will be
   run in collated order, so it's likely simplest to name them like this:
     * [filter-1]
     * [filter-2]
     * [filter-3]
       
   Begin with the section header line as follows:
[filter-something]

   Then, include a type string parameter to tell getmail what type of
   filter. The possible values are:
     * Filter_classifier -- run the message through an external program,
       and insert the output of the program into
       X-getmail-filter-classifier: header fields in the message.
       Messages can be dropped by having the filter return specific exit
       codes.
     * Filter_external -- supply the message to an external program,
       which can then modify the message in any fashion. The program must
       print the modified message to stdout. getmail reads the modified
       message from the program in this fasion before proceeding to the
       next filter or destination. Messages can be dropped by having the
       filter return specific exit codes.
       
   Both of these filter types take the same parameters. The required
   parameter is:
     * path (string) -- the path to the command to run. This value will
       be expanded for leading ~ or ~USER.
       
   In addition, they take the following optional parameters:
     * arguments (tuple of quoted strings) -- arguments to be supplied to
       the command. The following substrings will be substituted with the
       equivalent values from the message, if availble:
          + %(sender) -- envelope return-path address
          + %(recipient) -- envelope recipient address
          + %(local) -- local-part of the envelope recipient address
          + %(domain) -- domain-part of the envelope recipient address
       The default value is (), so no arguments are supplied to the
       command.
     * unixfrom (boolean) -- whether to include a Unix-style mbox From_
       line at the beginning of the message supplied to the command.
       Defaults to false.
     * user (string) -- if supplied, getmail will change the effective
       UID to that of the named user. Note that this typically requires
       root privileges.
     * group (string) -- if supplied, getmail will change the effective
       GID to that of the named group. Note that this typically requires
       root privileges.
     * allow_root_commands (boolean) -- if set, getmail will run external
       commands even if it is currently running with root privileges. The
       default is false, which causes getmail to raise an exception if it
       is asked to run an external command as root. Note that setting
       this option has serious security implications. Don't use it if you
       don't know what you're doing.
     * exitcodes_drop (tuple of integers) -- if the filter returns an
       exit code in this list, the message will be dropped. The default
       is (99, 100).
     * exitcodes_keep (tuple of integers) -- if the filter returns an
       exit code other than those in exitcodes_drop and exitcodes_keep,
       getmail assumes the filter encountered an error. getmail will then
       not proceed, so that the message is not lost. The default is (0,
       ).
       
      [filter-something] examples
      
   You might filter spam messages in your MUA based on information added
   to the message header by a spam-classification program. You could have
   that information added to the message header with a filter
   configuration like this:
[filter-3]
type = Filter_classifier
path = /path/to/my-classifier
arguments = ('--message-from-stdin', '--report-to-stdout')
user = nobody

   You might use a program to prevent users from accidentally destroying
   their data by stripping suspected attachments from messages. You could
   have that information added to the message header with a filter
   configuration like this:
[filter-3]
type = Filter_external
path = /path/to/my-mime-filter
arguments = ('--message-from-stdin', '--remove-all-but-attachment-types=text/pl
ain,text/rfc822')
user = nobody

Running getmail

   To use getmail, simply run the script getmail, which is typically
   installed in /usr/local/bin/ by default. getmail will read the default
   getmail rc file (getmailrc) from the default configuration/data
   directory (~/.getmail/) and begin operating.
   
   You can modify this behaviour by supplying commandline options to
   getmail. getmail understands the following options:
     * --version -- show getmail's version number and exit
     * --help or -h -- show a brief usage summary and exit
     * --getmaildir=DIR or -gDIR -- use DIR for configuration and data
       files
     * --rcfile=FILE or -rFILE -- read getmail rc file FILE instead of
       the default. The file path is assumed to be relative to the
       getmaildir directory unless this value starts with a slash (/).
       This option can be given multiple times to have getmail retrieve
       mail from multiple accounts.
     * --dump -- read rc files, dump configuration, and exit (debugging)
     * --trace -- print extended debugging information
       
   In addition, the following commandline options can be used to override
   any values specified in the [options] section of the getmail rc files:
     * --verbose or -v -- print informational messages while running
     * --quiet or -q -- print only warnings or errors while running
     * --delete or -d -- delete messages after retrieving
     * --dont-delete or -l -- do not delete messages after retrieving
     * --all or -a -- retrieve all messages
     * --new or -n -- retrieve only new (unseen) messages
       
   For instance, if you want to retrieve mail from two different mail
   accounts, create a getmail rc file for each of them (named, say,
   getmailrc-account1 and getmailrc-account2) and put them in ~/.getmail/
   . Then run getmail as follows:
$ getmail --rcfile getmailrc-account1 --rcfile getmailrc-account2

   If those files were located in a directory other than the default, and
   you wanted to use that directory for storing the data files as well,
   you could run getmail as follows:
$ getmail --getmaildir /path/to/otherdir --rcfile getmailrc-account1 --rcfile g
etmailrc-account2

Troubleshooting

   This section of the documentation is to be added to as getmail version
   4 progresses through beta testing to release state.
   
  Error messages
  
   getmail may output various diagnostic messages. The common ones and
   their meanings are given below.
   
    ImportError: getmail version 4 requires Python version 2.3.3 or later
    
   You tried to run getmail 4 with a version of Python prior to Python
   2.3.3. This is unsupported. If you cannot install a newer Python
   alongside your current version, please use getmail version 3, which
   supports Python 1.5.2 and later.
   
    Configuration error: ...
    
   getmail detected an error in your configuration. Check your getmail rc
   file(s). getmail will do its best to point out the exact cause of the
   error. Some of the specific errors it may find include the following.
   
      Configuration error: missing required configuration parameter name
      
   A class object in your getmail rc file requires the parameter name,
   but it was not found in the appropriate section of the file.
   
      Configuration error: configuration value name (value) not of required
      type type (why)
      
   The configuration parameter name must be of type type, but the
   supplied value value does not appear to be of that type. Further
   information may be present in why.
   
      Configuration error: maildir path missing trailing /
      
   Maildir paths must start with dot or slash and end with a slash.
   
      Configuration error: not a maildir (path)
      
   The specified maildir path path does not appear to be a valid maildir.
   
      Configuration error: not a mboxrd file (path)
      
   The specified mboxrd path path does not appear to be a valid mboxrd
   file.
   
      Configuration error: the fieldname header field does not record the
      envelope recipient address
      
   In a multidrop retriever configuration, you specified that the
   envelope recipient was recorded in a header field that getmail knows
   does not actually record that information.
   
      Configuration error: refuse to invoke external commands as root by
      default
      
   By default, getmail will not invoke external commands (in destinations
   or filters) when it is running with root privileges, for security
   reasons. See the documenation for possible solutions.
   
      Configuration error: no such command path
      
   An external command was specified as being located at path path, but
   the command executable was not found at that location.
   
      Configuration error: path not executable
      
   A specified external command at path path was found to not be an
   executable file.
   
      Configuration error: destination specifies section name section which
      does not exist
      
   A destination in the getmail rc file refers to another rc file section
   named section, but that section was not found in the file.
   
      Configuration error:
      
    Error: ...
    
   getmail detected an operational error. getmail will do its best to
   point out the exact cause of the error. Common causes are failures to
   connect to a remote mail server, timeouts during network operations,
   and other transient failures.
   
  Unexpected Behaviour
  
   If getmail is behaving in a manner other that you expected, see the
   following sections.
   
    getmail uses the wrong hostname for my machine
    
   If getmail records a hostname other than the "right" one for your host
   (in its Received: trace header fields), check your /etc/hosts file and
   make sure the "right" name is the first hostname listed for any of the
   addresses of the machine.
   
Frequently-Asked Questions (FAQs)

   The following questions about getmail come up more-or-less frequently.
   
  About getmail
  
    What is getmail?
    
   getmail is a mail retriever with support for POP3, POP3-over-SSL,
   IMAP4, IMAP4-over-SSL, and SPDS mail accounts. It supports normal
   single-user mail accounts and multidrop (domain) mailboxes. getmail is
   written in Python, and licensed under the GNU General Public License
   version 2.
   
    Why did you write getmail? Why not just use fetchmail?
    
   I do not like some of the design choices which were made with
   fetchmail. getmail does things a little differently, and for my
   purposes, better. In addition, most people find getmail easier to
   configure and use than fetchmail. Perhaps most importantly, getmail
   goes to great lengths to ensure that mail is never lost, while
   fetchmail (in its default configuration) frequently loses mail, causes
   mail loops, bounces legitimate messages, and causes many other
   problems.
   
   fetchmail's default configuration values frequently cause lost or
   misdirected mail, and seem to be chosen to cause maximum pain and
   inconvenience. From fetchmail's to-do file (emphasis mine):
   
     Maybe refuse multidrop configuration unless "envelope" is
     _explicitly_ configured ... This would prevent a significant class
     of shoot-self-in-foot problems.
     
     perhaps treat a delivery as "temporarily failed" ... This is so you
     don't lose mail if you configure the wrong envelope header.
     
   fetchmail is famous for mangling messages it retrieves, rather than
   leaving them alone as a mail-handling program should. getmail will add
   trace information to messages (so you can see what happened, and
   when), but will otherwise leave message content alone.
   
   In addition, fetchmail has a long history of security problems:
     * versions released before 20 June 2001 contain a buffer overflow,
       which can be remotely exploited (see
       www.securityfocus.com/bid/2877 for details). getmail is not
       vulnerable to buffer overflows, because buffers in Python are
       dynamically sized.
     * Another remotely-exploitable security hole discovered in fetchmail
       in June 2002; versions prior to 5.9.10 (released in June 2002) are
       exploitable .
     * Reading fetchmail's UPDATES file, it appears that another security
       problem was fixed in 5.9.12, where a server could crash fetchmail
       on 64-bit platforms. Also worrying is a mention that it includes a
       fix for "password shrouding".
     * Another remotely-exploitable security hole in fetchmail discovered
       in September 2002; this hole lets an attacker run arbitrary code
       on the victim's computer.
     * Another remotely-exploitable security hole in fetchmail discovered
       in December 2002; once again, a remote attacker can run arbitrary
       code on the machine running fetchmail in its default
       configuration. See this advisory for details.
     * January 2003: More buffer overflows in fetchmail let attackers run
       arbitrary code .
     * October 2003: Anyone can cause fetchmail to crash by sending you a
       message . Other problems are here , and I might have missed some .
       
   I've given up even trying to stay abreast of the various security
   holes in fetchmail.
   
   But don't just take my word for it; see
   http://docs.freebsd.org/cgi/mid.cgi?200102172349.QAA11724 .
   
   getmail users have not had to worry about any of these security holes.
   
    How can I get support for getmail?
    
   getmail is Free Software. As such, it comes with no warranty. However,
   I will do my best to support getmail on a voluntary basis through the
   getmail mailing list.
   
   If you are using getmail in a commercial or other environment where
   problems cost money, consider contacting me privately for commercial
   support.
   
   If you have questions about getmail, the first step is to read the
   documentation, and the remainder of the Frequently Asked Questions. If
   your question isn't answered there, search the getmail mailing list
   archives at http://marc.theaimsgroup.com/?l=getmail&r=1&w=2 .
   
   If you still haven't found an answer to your question, please
   subscribe to the mailing list by sending a blank email to
   <getmail-subscribe @ discworld.dnsalias.org> . If you post your
   question there, I will see it. As an additional bonus, your question
   may be answered by another member of the list.
   
    I think I found a bug! How do I report it?
    
   Ideally, you should join the mailing list. Send your bug report there.
   You should include the following information:
     * getmail version
     * Python version
     * any error message which getmail displayed
     * the output from running getmail with your normal options plus
       --dump
     * if your problem is getmail not determining the proper local
       recipient, please include the output of running getmail with your
       normal options plus --trace, showing the retrieval of one
       problematic message.
       
   If you absolutely cannot sign up for the mailing list, send the report
   to me directly. I may not be able to respond to all reports privately,
   but I will try to address any bugs I find out about this way.
   
    Does getmail support virus scanning of retrieved messages?
    
   Yes. You can use getmail message filtering options to do this with an
   external virus scanning program, or invoke your virus scanning program
   during delivery with getmail's support for external MDAs.
   
    Does getmail support spam filtering of retrieved messages?
    
   Yes. You can use getmail message filtering options to do this with an
   external spam filtering program, or invoke your spam filtering program
   during delivery with getmail's support for external MDAs.
   
    Does getmail support SSL?
    
   Yes. getmail has built in support for POP3-over-SSL and
   IMAP4-over-SSL.
   
    Does getmail rewrite mail headers when it retrieves mail?
    
   No. Rewriting message header fields is bad. getmail will add a new
   Received: header field and a new Delivered-To: header field, but does
   not rewrite existing headers. You can disable the creation of these
   header fields.
   
  Using getmail with other software
  
   getmail user Frankye Fatarelli contributed to the following questions
   about integrating getmail with SpamAssassin and ClamAV.
   
    How do I use getmail with spamassassin?
    
   SpamAssassin can be run in standalone mode or in a client/server
   configuration. In both configurations, SpamAssassin accepts a wide
   variety of arguments; please refer to SpamAssassin's manual pages or
   online documentation for details.
   
   To filter messages through SpamAssassin in a client/server
   configuration (i.e. with the spamd daemon), use a configuration like
   this:
[filter]
type = Filter_external
path = /usr/local/bin/spamc
arguments = ("-s 10000", )

   The value supplied to the -s option is the maximum message size
   accepted (in bytes). The default is 250k.
   
   A similar configuration without the spamd daemon would be:
[filter]
type = Filter_external
path = /usr/local/bin/spamassassin
arguments = ("--report", )

   The --report option sends the message to the various spam-blocker
   databases and tags it as spam in your bayesian database.
   
   Note that if you are using Bayesian (learning) filtering, and you've
   put your SpamAssassin filter after any getmail Filter_classifier, you
   may have a problem with your learning filter learning getmail's header
   fields. That is, the headers added by the other filters may get
   learned, and affect your database. To prevent this, ensure that
   SpamAssassin ignores these fields by adding the following to your
   SpamAssassin configuration:
bayes_ignore_header X-getmail-filter-classifier

    How do I use getmail with ClamAV?
    
   ClamAV, like SpamAssassin, can by used in standalone or client/server
   configurations.
   
   To use ClamAV without the clamd daemon, use a filter configuration
   like this:
[filter]
type = Filter_classifier
path = /usr/local/bin/clamscan
arguments = ("--stdout", "--no-summary",
    "--mbox", "--infected", "-")
exitcodes_drop = (1,)

   The above assumes you do not want the infected emails to be delivered.
   If you do want them delivered, you would use a slightly different
   configuration:
[filter]
type = Filter_classifier
path = /usr/local/bin/clamscan
arguments = ("--stdout", "--no-summary",
    "--mbox", "--infected", "-")
exitcodes_keep = (0,1)

   To use ClamAV with the clamd daemon, use a filter configuration like
   this:
[filter]
type = Filter_classifier
path = /usr/local/bin/clamdscan
arguments = ("--stdout", "--disable-summary", "-")
exitcodes_drop = (1, )

   As with Clamscan (above), if you do want the infected messages
   delivered instead of dropped, you should modify your configuration as
   follows:
[filter]
type = Filter_classifier
path = /usr/local/bin/clamdscan
arguments = ("--stdout", "--disable-summary", "-")
exitcodes_keep = (0,1)

   You may find it necessary to specify the paths of some decompression
   utilities used by ClamAV with additional arguments like:
arguments = ( ...,
    "--unzip=/usr/local/bin/unzip",
    "--unrar=/usr/local/bin/unrar",
    "--unarj=/usr/local/bin/unarj",
    "--lha=/usr/local/bin/lha",
    "--jar=/usr/local/bin/unzip",
    "--tar=/usr/bin/tar",
    "--tgz=/usr/bin/tar"

   Note: if you want to use the daemonized (client/server) version of
   ClamAV, ensure that your clamav.conf file contains:
ScanMail

   The paths to the various decompression utilities must be specified in
   this file as well.
   
      Getting prettier output from ClamAV
      
   Using getmail's Filter_classifier, the output of your filtering
   program (in this case ClamAV) is placed into a
   X-getmail-filter-classifier: header field in the message. This can
   make auditing the actions of filters difficult if you use multiple
   filters and cannot tell which filter added which line.
   
   To correct this, you can use an additional filter to change the name
   of the added filter header lines immediately after each filter is run.
   For example, reformail, from the maildrop package (which is in turn
   part of the Courier MTA ) can be used in this fashion to rename the
   added header fields (say, to "X-mypersonalmailscan") with a filter
   configuration like this:
type = Filter_external
path = /usr/local/bin/reformail
arguments = ("-R", "X-getmail-filter-classifier:",
    "X-mypersonalmailscan:")

   Simply ensure ClamAV is invoked as the first filter, and this is
   invoked as the second filter (or immediately after the ClamAV filter,
   if it is the second, third, etc. filter).
     _________________________________________________________________
   
   © 2004 Charles Cazabon; all rights reserved. May not be reproduced in
   any form without the prior written consent of the author.
   
   [up to Charles Cazabon's Writings]
   
   [up to Charles Cazabon's Pages]
   
   Valid XHTML 1.1 
