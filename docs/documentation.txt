This is the temporary configuration/usage documentation for getmail
version 4 and is intended only for alpha-testers.

getmail version 4 is licensed under the GNU General Public License version
2 (only).  A copy of this license is included in the file COPYING.
If you wish to obtain a license for getmail with different terms,
please contact me.  The GPL grants you the right (among others) to redistribute
the software under the same conditions, but I would appreciate it if you
did not distribute this alpha-test software.  Please wait at least until
getmail v.4 is in beta-state, is feature complete, and contains complete
documentation.

All alpha testers should be members of the mailing list set up for this
test; if you are not a member of the mailing list, please send mail to
<getmail4alpha@discworld.dyndns.org> asking to be added to the list.

Instructions for use, questions regarding the same, bug reports, and general
user discussion of getmail v. 4 are all appropriate for the mailing list.
The list address (members only) is <getmail-alpha@discworld.dnsalias.org>.
No HTML; please configure your MUA to send plain-text only.  Please do not
send questions regarding getmail verison 4 to the main getmail users' mailing
list; it will only confuse things.

WARNING:  getmail version 4 is presently alpha-quality software.  That means it
is not feature-complete and almost certainly contains bugs, perhaps even some
that could eat your mail.  It is recommended that you only test getmail v. 4
with mail accounts which you can afford to lose messages from, test accounts set
up expressly for this purpose, or that you retrieve all your mail with a stable
retriever first (i.e. getmail v.3).

Major Changes since v.3
=======================

Each getmail rc file can only contain one account to retrieve mail from.  If you
are currently retrieving mail from multiple accounts, you will need multiple rc
files.  They can all reside in the same data/configuration directory, and
getmail can be invoked with multiple rc files in a single run, so you can still
retrieve mail from multiple accounts without having to run getmail multiple
times.

The rc file format is slightly different.  getmail is now modular and
extensible; each rc file contains an optional [options] section, one [retriever]
section, zero or more [filterX] sections, one required [destination] section,
and optional extra sections for different destinations.

Invoking getmail
================

getmail v.4 is invoked as follows:

    usage: getmail.py [options]

    options:
      --version             show program's version number and exit
      -h, --help            show this help message and exit
      -gDIR, --getmaildir=DIR
                            look in DIR for config/data files
      -rFILE, --rcfile=FILE
                            load configuration from FILE (may be given
                            multiple times)
      --dump                dump configuration and exit (debugging)
      --trace               print extended debugging information

      Overrides:
        The following options override those specified in any getmailrc file.
        -v, --verbose       print informational messages
        -q, --quiet         do not print informational messages
        -d, --delete        delete messages from server after retrieving
        -l, --dont-delete   do not delete messages from server after retrieving
        -a, --all           retrieve all messages
        -n, --new           retrieve only unread messages

getmail can be invoked with no options; --getmaildir defaults to
"$HOME/.getmail/", and --rcfile defaults to "getmailrc".  A simple invocation
reading two rc files might be:

    ./getmail.py --rcfile getmailrc1 --rcfile getmailrc2

If you are using ~/data/getmail as your data/configuration directory instead
of the default ~/.getmail/, the above command would become:

    ./getmail.py --getmaildir ~/data/getmail/ --rcfile getmailrc1 --rcfile getmailrc2

Configuring getmail
===================

A getmail rc file consists of sections of name, value pairs.  Each section
is preceded by a section header like:

    [section name]

The section's name, value pairs are specified like this:

    name = value

They can also be specified as "name : value", but that's ugly and confuses
the issue.

Any line beginning with a "#" or ";" character is a comment, and it's contents
are ignored.  Values can be broken across lines; the second and subsequent
lines must start with whitespace to indicate the continuation, rfc2822-style.

The sections [retriever] and [destination] are required.  The [options]
section can be omitted.  Filters are specified with section titles beginning
with "filter" and are applied in collating order; for instance, to apply
three filters, you would have the following sections:

    [filter1]
    ...
    [filter2]
    ...
    [filter3]
    ...

The simplest possible getmail rc file consists of a [retriever] section
and a [destination] section.

Options
-------

getmail global defaults can be configured in the [options] section of the
getmail rc file.  At the moment, the only options available for this section
are:

    verbose (boolean) - default: True
    read_all (boolean) - default: True
    delete (boolean) - default: False
    delete_after (integer) - default: 0
    max_message_size (integer) - default: 0
    max_messages_per_session (integer) - default: 0
    delivered_to (boolean) - default: True
    received (boolean) - default: True
    message_log (string filename) - default: None
    message_log_syslog (boolean) - default: False

Boolean options can be set to True or False (case-insensitive).  They also
accept "1", "on", "yes", "0", "off", and "no" for compatibility.

Integer options take any positive integer, and the default value of 0 means to
disable that function.

The specific meaning of the options are:

    verbose - controls whether getmail operates verbosely or not, and can be
    overridden from the commandline with the --verbose/--quiet options.

    read_all - controls whether getmail will retrieve all mail, or only
    new/unseen  messages.

    delete - controls whether getmail will delete a message after retrieving.

    delete_after - delete messages after they've been in the mailbox X days
    (instead of immediately after retrieval).  Note that delete overrides
    delete_after.

    max_message_size - don't retrieve messages over X bytes long.

    max_messages_per_session - retrieve and process a maximum of X messages
    before closing the mail retrieval session.  May help people with extremely
    unreliable servers avoid duplicate retrieved messages.

	delivered_to - whether to add a Delivered-To: header field to messages.
	
	received - whether to add a Received: header field to messages.
	
    message_log - log activity to the specified file.  The specified file will
    be expanded for leading "~/" or "~user/".

    message_log_syslog - if set, activity will be logged to the system logger
    with facility LOG_MAIL and level LOG_INFO.

Some parameter values (for destinations, etc) are specified as being a Python
tuple.  This means (essentially) a non-mutable list of zero or more items
separated by commas.  The individual items can be anything, but in getmail are
typically strings.  Tuples are conventionally shown with surrounding
parentheses, but they are optional for all but the empty tuple or a tuple broken
across multiple lines.  Note that a 1- tuple (single item tuple) requires a
trailing comma.

examples:

    # A 1-tuple without parentheses
    item = "1",

    # A 1-tuple with parentheses
    item = ("foo",)

    # A 2-tuple
    item = ("from", "to")

    # An empty tuple
    item = ()

Retriever
---------

A getmail retriever is a message source.  It is configured with the [retriever]
section of the rc file.

The current retrievers are:

    SimplePOP3Retriever - single-drop POP3 retriever with optional APOP support.
                        Does not provide recipient information about retrieved
                        messages.
    SimplePOP3SSLRetriever - same as above for POP3-over-SSL support.
    MultidropPOP3Retriever - multi-drop (domain mailbox) retriever with
                           optional APOP support.  Provides recipient
                           information about retrieved messages.
    MultidropPOP3SSLRetriever - same as above for POP3-over-SSL support.
    MultidropSPDSRetriever - multi-drop (domain mailbox) retriever for use with
                           demon.co.uk SPDS mailboxes.  Provides recipient
                           information about retrieved messages.
    SimpleIMAPRetriever - basic IMAPv4r1 support.
    SimpleIMAPSSLRetriever - same as above for IMAP-over-SSL support.
    MultidropIMAPRetriever - multi-drop (domain mailbox) retriever for IMAP.
                             Provides recipient information about retrieved
                             messages.
    MultidropIMAPSSLRetriever - same as above for IMAP-over-SSL support.

SimplePOP3Retriever takes the following configuration parameters:

    server - server name or IP address of the POP3 server.
    port (optional) - TCP port to connect to.  Defaults to the standard POP3
                      port (110).
    username - POP3 username.
    password (optional) - POP3 password.  If not supplied, getmail will prompt
                          you to enter it.
    use_apop (optional) - whether to use APOP for POP3 login.  Defaults to False.
    timeout (optional) - defaults to 180 seconds.

    example:

        [retriever]
        type = SimplePOP3Retriever
        server = pop.example.net
        username = jeff.plotzky
        password = mailpassword

SimplePOP3SSLRetriever takes the same configuration parameters as
SimplePOP3Retriever, plus two optional additional parameters:

    port (optional) - same as above, but the default is the standard
                      POP3-over-SSL port (995).
    keyfile (optional) - path to an SSL PEM-formatted key file containing
                         the private key to use.
    certfile (optional) - path to a PEM-formatted certificate chain file.

Note that Python's socket.ssl() function does not do any certificate
verification!

MultidropPOP3Retriever takes the same configuration parameters as
SimplePOP3Retriever, plus one additional parameter:

    envelope_recipient - indicates which message header field holds the address
                         of the message recipient.  This is given in the format
                         "header_fieldname:number".  A value of
                         "delivered-to:3" indicates getmail should extract the
                         envelope recipient address from the third (from the
                         top) Delivered-To: header field.

    example:

        [retriever]
        type = MultidropPOP3Retriever
        server = pop.example.net
        username = exampledotorg
        password = mailpassword
        envelope_recipient = delivered-to:2

MultidropPOP3SSLRetriever takes the same configuration parameters as
MultidropPOP3Retriever, plus two optional additional parameters:

    keyfile (optional) - path to an SSL PEM-formatted key file containing
                         the private key to use.
    certfile (optional) - path to a PEM-formatted certificate chain file.

Note that Python's socket.ssl() function does not do any certificate
verification!

MultidropSPDSRetriever takes the same configuration parameters as
SimplePOP3Retriever, except that it does not take the use_apop parameter.

    example:

        [retriever]
        type = MultidropSPDSRetriever
        server = pop.demon.co.uk
        username = exampledotcom
        password = mailpassword

SimpleIMAPRetriever takes the following configuration parameters:

    server - server name or IP address of the POP3 server.
    port (optional) - TCP port to connect to.  Defaults to the standard IMAP
                      port (143).
    username - IMAP username.
    password (optional) - IMAP password.  If not supplied, getmail will prompt
                          you to enter it.
    use_cram_md5 (optional) - whether to use CRAM-MD5 for IMAP login.
                              Defaults to False.  This will not work, so don't
                              use it.
    timeout (optional) - defaults to 180 seconds.
    mailboxes (optional) - a Python tuple of strings.  Each string is a mailbox
                           in the IMAP mailstore to retrieve mail from.
                           Defaults to ("INBOX", ).  To retrieve mail from
                           several mailboxes, you might set this to
                           ("INBOX", "spam", "list-getmail") or similar.
    move_on_delete (optional) - a string representing the path of a mailbox.
                                If present, getmail will copy messages to that
                                mailbox before deleting them (i.e., to copy
                                retrieved mail to an archive mailbox, etc).
                                Note that this happens only when the delete
                                command is issued; if you don't tell getmail
                                to delete retrieved mail, it won't be copied
                                either.

    example:

        [retriever]
        type = SimpleIMAPRetriever
        server = mail.example.net
        username = jeff.plotzky
        password = mailpassword
        mailboxes = ('INBOX', 'lists/getmail', 'lists/foobar')
        move_on_delete = archive/retrieved

SimpleIMAPSSLRetriever takes the same configuration parameters as
SimpleIMAPRetriever, plus two optional additional parameters:

    port (optional) - same as above, but the default is the standard
                      IMAP-over-SSL port (993).
    keyfile (optional) - path to an SSL PEM-formatted key file containing
                         the private key to use.
    certfile (optional) - path to a PEM-formatted certificate chain file.

Note that Python's socket.ssl() function does not do any certificate
verification!

MultidropIMAPRetriever takes the same configuration parameters as
SimpleIMAPRetriever, plus one additional parameter:

    envelope_recipient - indicates which message header field holds the address
                         of the message recipient.  This is given in the format
                         "header_fieldname:number".  A value of
                         "delivered-to:3" indicates getmail should extract the
                         envelope recipient address from the third (from the
                         top) Delivered-To: header field.

    example:

        [retriever]
        type = MultidropIMAPRetriever
        server = mail.example.net
        username = exampledotorg
        password = mailpassword
        envelope_recipient = delivered-to:2

MultidropIMAPSSLRetriever takes the same configuration parameters as
MultidropIMAPRetriever, plus two optional additional parameters:

    keyfile (optional) - path to an SSL PEM-formatted key file containing
                         the private key to use.
    certfile (optional) - path to a PEM-formatted certificate chain file.

Note that Python's socket.ssl() function does not do any certificate
verification!

Destinations
------------

A getmail destination is a method of delivering messages to one or more
recipients.  Some destinations require recipient information about the messages
they handle to be able to deliver to the correct user or mailbox; these
destinations will only work with a retriever capable of providing that
information.

The current destinations are:

  Maildir - deliver all retrieved messages to a Maildir.  Does not require
            recipient information.
  Mboxrd - deliver all retrieved messages to an mboxrd file with fcntl-style
           locking.  Does not require recipient information.
  MDA_qmaillocal - deliver messages by invoking qmail-local, obeying .qmail
                   files, extension addressing, etc.
  MDA_external - deliver messages by invoking an arbitrary command.  Use this
                 for delivering through procmail, maildrop, etc.
  MultiSorter - deliver messages to an assortment of Maildirs, Mboxrd files,
                or other destination types by matching the recipient address
                against regular expressions.  Requires recipient information.
                This is similar to getmail v.3's "postmaster" and "local"
                directives.

Maildir takes the following configuration parameters:

    path - path to the maildir.  This will be expanded for leading "~/" or
    "~user/".

    example:

        [destination]
        type = Maildir
        path = ~tracyk/Maildir/

    Note that a maildir must exist before trying to deliver to it!  getmail will
    /not/ create a specified maildir if it does not exist.  If you don't know
    what a maildir is, see http://qmail.org/man/man5/maildir.html and
    http://cr.yp.to/proto/maildir.html .

Mboxrd takes the following configuration parameters:

    path - path to the mboxrd file.  This will be expanded for leading "~/" or
    "~user/".  Note that unlike v.3, getmail v.4 will create the specified
    mboxrd file if it does not exist.

    example:

        [destination]
        type = Mboxrd
        path = /var/spool/mail/georgel

MDA_external takes the following configuration parameters:

    path - path to the command to use an an MDA.  This will be expanded for
           leading "~/" or "~user/".

    arguments (optional) - arguments to be supplied to the command, expressed as
                           a valid Python tuple.  If available from the message
                           retriever, the following string replacements can be
                           specified:
                            %(sender) - envelope return path
                            %(recipient) - recipient address
                            %(domain) - domain-part of recipient address
                            %(local) - local-part of recipient address

    unixfrom (optional) - whether to include a From_ line before the message.
                          Defaults to False.

    user (optional) - if provided, the external command will be run as the
                      specified user.  This requires that the main getmail
                      process have permission to change the effective user ID.

    group (optional) - if provided, the external command will be run with the
                       GID of the specified group.  This requires that the main
                       getmail process have permission to change the effective
                       group ID.

    allow_root_commands (optional) - if set, external commands are allowed when
                                     running as root.  The default is not to allow
                                     such behaviour.

    example:

        [destination]
        type = MDA_external
        path = /usr/local/bin/mymda
        arguments = ("--strip-attachments", "-f%(sender)", "--fast")

MultiSorter takes the following configuration parameters:

    default - path to maildir or mbox file which takes all mail not
              otherwise matched by locals (see below).  This will be expanded
              for leading "~/" or "~user/".

    locals - a list of (regular expression, destination) pairs, one per line.
             Lines after the first must start with whitespace to indicate
             they are a continuation of the previous line.
             If the message recipient matches a given regular expression,
             it will be delivered to the corresponding destination.
             The destination can be any type specified with another section in
             the rc file by specifying the name of the section
             (i.e. [sectionname]).  Otherwise, it is assumed to be a maildir if
             it starts with a dot or slash and ends with a slash "/", or an
             mboxrd if it starts with a dot or a slash and does not end with a
             slash.
             A given message may match multiple regular expressions
             and be delivered to multiple destinations.

    Note that to use the "locals" capability, the message retriever must supply
    message recipient information.

    example:

        [destination]
        type = MultiSorter
        default = ~joe/Maildir/
        locals = jeff@example.net ~jeff/Maildir/
                 sam@example.net ~sam/Mail/inbox
                 chris@example.net [mymda]
        [mymda]
        type = MDA_external
        path = /usr/local/bin/mymda
        arguments = ("--strip-attachments", "-f%(sender)", "--fast")

MDA_qmaillocal hands messages off to qmail-local for delivery.  qmail-local will
read the appropriate .qmail file for specific delivery instructions, or use a
provided value (default: "./Maildir/") if no appropriate .qmail file exists.
It takes the following parameters, all optional:

    qmaillocal - complete path to the qmail-local binary.  Defaults to
                 "/var/qmail/bin/qmail-local".

    user - username supplied to qmail-local as the "user" argument.  Defaults
           to the login name of the current effective user ID.

    homedir - complete path to the directory supplied to qmail-local as the
              "homedir" argument.  Defaults to the home directory of the
              current effective user ID.

    localdomain - supplied to qmail-local as the "domain" argument.  Defaults
                  to socket.gethostname().

    defaultdelivery - supplied to qmail-local as the "defaultdelivery"
                      argument.  Defaults to "./Maildir/".

    conf-break - supplied to qmail-local as the "dash" argument and used to
                 calculate ext from local.  Defaults to "-".

    localparttranslate - a string representing a Python 2-tuple of strings
                       (i.e. "('foo', 'bar')").  If supplied, the retrieved
                       message recipient address will have any leading instance
                       of "foo" replaced with "bar" before being broken into
                       "local" and "ext" for qmail-local (according to the
                       values of "conf-break" and "user").  This can be used
                       to add or remove a prefix of the address.

    strip_delivered_to - if set, existing Delivered-To: header fields will be
                       removed from the message before processing by
                       qmail-local.  This may be necessary to prevent
                       qmail-local falsely detecting a looping message if (for
                       instance) the system retrieving messages otherwise
                       believes it has the same domain name as the POP
                       server.  Inappropriate use, however, may cause message
                       loops.

    allow_root_commands (boolean) - if set, external commands are allowed when
                                  running as root.  The default is not to allow
                                  such behaviour.

Filters
-------

Filters are optional programs which can cause getmail to drop (ignore) certain
messages.  Some filter types can also change the content of messages or add
extra information to the message header before delivering them to a destination.
Each filter is specified in its own section in the getmail rc file (i.e.
[filter1], [filter2], etc) and is applied in collating order.  A filter can
return None instead of the message to cause getmail to drop the message.

Filter_external

The first filter type is Filter_external, which passes the message through an
arbitrary external command.  This command /must/ read the message from stdin and
write the (possibly modified) message to stdout.  If the command exits with one
of a specified list of values (default 99 or 100), the message will be dropped
(i.e. not delivered to any destination).  If the command exits with one of
another specified list of values (default 0), the (possibly modified) message is
passed to the next filter or destination.  Otherwise, if the command exits with
a value other than the two specified lists, or writes to stderr, it is
considered an error.

Filter_external takes the following configuration parameters:

    path - path to the command to use an a filter.  This will be expanded for
           leading "~/" or "~user/".

    arguments (optional) - arguments to be supplied to the command, expressed as
                           a valid Python tuple.  If available from the message
                           retriever, the following string replacements can be
                           specified:
                            %(sender) - envelope return path
                            %(recipient) - recipient address
                            %(domain) - domain-part of recipient address
                            %(local) - local-part of recipient address

    unixfrom (optional) - whether to include a From_ line before the message.
                          Defaults to False.

    exitcodes_keep (optional) - filter exit codes which mean to pass the message
                                to the next filter or destination, expressed
                                as a Python tuple of integers.  Default is
                                (0, ).

    exitcodes_drop (optional) - filter exit codes which mean to drop the
                                message, expressed as a Python tuple of
                                integers.  Default is (99, 100).

    user (optional) - if provided, the external command will be run as the
                      specified user.  This requires that the main getmail
                      process have permission to change the effective user ID.

    group (optional) - if provided, the external command will be run with the
                       GID of the specified group.  This requires that the main
                       getmail process have permission to change the effective
                       group ID.

    allow_root_commands (optional) - if set, external commands are allowed when
                                     running as root.  The default is not to allow
                                     such behaviour.

    example:

        [filter1]
        type = Filter_external
        path = /usr/local/bin/mailfilter
        arguments = ("--strip-attachment-type=exe,scr",)

Filter_classifier

Filter_classifier works differently; it runs an external program which does
not modify the message and does not print the original message.  Anything the
external program prints to stdout is put into a new X-getmail-filter-classifier:
field in the message header.  If the program doesn't print anything, no header
field is added.

Filter_classifier takes exactly the same parameters as Filter_external.

    example:

        [filter1]
        type = Filter_classifier
        path = /usr/local/bin/clamdscan
        arguments = ("--report", )

Example configurations
======================

The simplest getmail 4 configuration is a SimplePOP3Retriever which delivers all
mail to a single Maildir or Mboxrd destination.  Such a getmail rc file might
look like this:

        [retriever]
        type = SimplePOP3Retriever
        server = pop.example.net
        username = jeff.plotzky
        password = mailpassword

        [destination]
        type = Maildir
        path = ~tracyk/Maildir/

The simplest domain-mailbox configuration involves a MultidropPOP3Retriever
which delivers mail to an assortment of maildirs or mbox files with a
MultiSorter destination.  Such a getmail rc file might
look like this:

        [retriever]
        type = MultidropPOP3Retriever
        server = pop.example.net
        username = exampledotorg
        password = mailpassword
        envelope_recipient = delivered-to:2

        [destination]
        type = MultiSorter
        default = ~joe/Maildir/
        locals = ^jeff@.* ~jeff/Maildir/
                 ^sam@.*  ~sam/Mail/inbox
                 ^sue@.*  ~sue/Maildir/

Other, more complex configurations are possible.  If you need help setting
one up, please ask on the alpha-testing mailing list.
