
                             getmail documentation
                                       
   This is the documentation for getmail version 4. Version 4 includes
   numerous changes from version 3.x; if you are using getmail version 3,
   please refer to the documentation included with that version of the
   software.
   
   getmail is Copyright © 1998-2004 Charles Cazabon.
   
   getmail is licensed under the GNU General Public License version 2
   (only). If you wish to obtain a license to use getmail under other
   terms, please contact me directly.
   
                               Table of Contents
                                       
     * getmail documentation
     *
          + Features
          + Differences from previous versions
          + Requirements
          + Obtaining getmail
          + Installing getmail
          + getmail mailing lists
     * Configuring getmail
     *
          + Creating a getmail rc file
     * Running getmail
     *
          + Commandline options
          + Using getmail as an MDA
     * Troubleshooting
     *
          + Error messages
          + Unexpected Behaviour
     * Frequently-Asked Questions (FAQs)
     *
          + About getmail
          +
               o What is getmail?
               o What platforms/machines does getmail run on?
               o
                    # Does getmail run on MS Windows?
                    # Does getmail run on Macintosh systems?
                    # Does getmail require Unix/Linux?
               o How can I get support for getmail?
               o I think I found a bug! How do I report it?
               o Does getmail support virus scanning of retrieved
                 messages?
               o Does getmail support spam filtering of retrieved
                 messages?
               o Does getmail support SSL?
               o Does getmail rewrite mail headers when it retrieves
                 mail?
               o Can I upgrade from getmail 3 to getmail 4? What about my
                 "oldmail" files?
               o Why did you write getmail? Why not just use fetchmail?
          + Configuring getmail
          +
               o What is a "domain mailbox"?
               o Do I have to run sendmail or another MTA to use getmail?
               o What's a maildir?
               o What's "mboxrd" format?
               o This rc stuff seems complicated. Does it have to be?
          + How do I ...
          +
               o How do I stop getmail adding a Delivered-To: header to
                 messages?
               o How do I stop getmail adding a Received: header to
                 messages?
               o How do I make getmail deliver messages by re-injecting
                 with SMTP?
               o How do I make getmail deliver messages to an mh folder?
               o How do I run getmail in "daemon" mode?
               o How do I make getmail retrieve mail from Hotmail?
          + Using getmail with other software
          +
               o How do I use SpamAssassin with getmail?
               o How do I use ClamAV with getmail?
               o
                    # Getting prettier output from ClamAV
               o How do I use procmail with getmail?
               o How do I use maildrop with getmail?
               o How do I use TMDA with getmail?
       
                       Frequently-Asked Questions (FAQs)
                                       
   The following questions about getmail come up more-or-less frequently.
   Please also read the unexpected behaviour section of the
   troubleshooting document.
   
About getmail

  What is getmail?
  
   getmail is a mail retriever with support for POP3, POP3-over-SSL,
   IMAP4, IMAP4-over-SSL, and SDPS mail accounts. It supports normal
   single-user mail accounts and multidrop (domain) mailboxes. getmail is
   written in Python, and licensed under the GNU General Public License
   version 2.
   
  What platforms/machines does getmail run on?
  
   getmail runs on basically any platform. It's designed to, and written
   in a language that helps to maintain cross-platform compatibility.
   getmail is known to run on the following platforms:
     * Linux-based GNU systems (all distributions)
     * HURD-based GNU systems
     * FreeBSD
     * OpenBSD
     * NetBSD
     * HP/UX
     * Sun Solaris
     * IBM AIX
     * Digital/Compaq Tru64 (a.k.a OSF/1) UNIX
     * SGI Irix
     * other commercial Unices
     * Digital VMS / OpenVMS
     * BeOS
     * Amiga OS
     * OS/2
     * MS Windows
     * Cygwin on Windows
     * Macintosh OS X
     * Macintosh OS 9
       
   But getmail will also run on other, less common platforms. The only
   real requirement is that Python run on that platform, and porting
   Python is generally very easy.
   
    Does getmail run on MS Windows?
    
   Yes.
   
    Does getmail run on Macintosh systems?
    
   Yes.
   
    Does getmail require Unix/Linux?
    
   No.
   
  How can I get support for getmail?
  
   getmail is Free Software. As such, it comes with no warranty. However,
   I will do my best to support getmail on a voluntary basis through the
   getmail mailing list.
   
   If you are using getmail in a commercial or other environment where
   problems cost money, consider contacting me privately for commercial
   support, by emailing <getmail-support @ discworld.dyndns.org>
   
   If you have questions about getmail, the first step is to read the
   documentation, and the remainder of the Frequently Asked Questions. If
   your question isn't answered there, search the getmail mailing list
   archives at http://marc.theaimsgroup.com/?l=getmail&r=1&w=2 .
   
   If you still haven't found an answer to your question, please
   subscribe to the getmail users' mailing list by sending a blank email
   to <getmail-subscribe @ discworld.dnsalias.org>. If you post your
   question there, I will see it. As an additional bonus, your question
   may be answered by another member of the list.
   
  I think I found a bug! How do I report it?
  
   Ideally, you should join the mailing list and send your bug report
   there. You should include the following information:
     * getmail version
     * Python version
     * any error message which getmail displayed
     * the output from running getmail with your normal options plus
       --dump
     * if your problem is getmail not determining the proper local
       recipient, please include the output of running getmail with your
       normal options plus --trace, showing the retrieval of one
       problematic message.
       
   If you absolutely cannot sign up for the mailing list, send the report
   to me directly at <getmail-bugs @ discworld.dyndns.org>. I may not be
   able to respond to all reports privately, but I will try to address
   any bugs I find out about this way.
   
  Does getmail support virus scanning of retrieved messages?
  
   Yes. You can use getmail message filtering options to do this with an
   external virus scanning program, or invoke your virus scanning program
   during delivery with getmail's support for external MDAs.
   
   Also see the FAQ about using getmail with the ClamAV program.
   
  Does getmail support spam filtering of retrieved messages?
  
   Yes. You can use getmail message filtering options to do this with an
   external spam filtering program, or invoke your spam filtering program
   during delivery with getmail's support for external MDAs.
   
   Also see the FAQ about using getmail with the SpamAssassin program.
   
  Does getmail support SSL?
  
   Yes. getmail has built in support for POP3-over-SSL and
   IMAP4-over-SSL.
   
  Does getmail rewrite mail headers when it retrieves mail?
  
   No. Rewriting message header fields is bad. getmail will add a new
   Received: header field and a new Delivered-To: header field, but does
   not rewrite existing headers. You can disable the creation of these
   header fields.
   
  Can I upgrade from getmail 3 to getmail 4? What about my "oldmail" files?
  
   Yes. getmail version 4 uses exactly the same
   oldmail-server-port-username naming convention for its oldmail files.
   The only difference is that version 4 escapes a couple of additional
   characters in this string so that it is truly cross-platform
   compatible. If you upgrade from version 3 to version 4, getmail will
   still remember which messages you've already retrieved.
   
   To upgrade, do the following:
    1. Rename your old getmail rc file, creating a new file in
       ~/.getmail/getmailrc.
    2. Create a new [options] section, containing the appropriate values
       from your version 3 rc file [defaults] section.
    3. Create a new [retriever] section, using your previous server
       configuration values in a new type = SimplePOP3Retriever or type =
       MultidropPOP3Retriever as appropriate.
    4. Create a new [destination] section, using your previous
       destination path values in a new type = Maildir, type = Mboxrd,
       type = MDA_external, or type = MultiSorter destination as
       appropriate.
    5. If you were retrieving messages from multiple mail accounts in a
       single version 3 getmail rc file, split them up into one account
       per version 4 rc file.
       
   That's it.
   
  Why did you write getmail? Why not just use fetchmail?
  
   I do not like some of the design choices which were made with
   fetchmail. getmail does things a little differently, and for my
   purposes, better. In addition, most people find getmail easier to
   configure and use than fetchmail. Perhaps most importantly, getmail
   goes to great lengths to ensure that mail is never lost, while
   fetchmail (in its default configuration) frequently loses mail, causes
   mail loops, bounces legitimate messages, and causes many other
   problems.
   
   When people have pointed out problems in fetchmail's design and
   implementation, it's maintainer has frequently ignored them, or (worse
   yet) gone in the completely wrong direction in the name of "fixing"
   the problems. For instance, fetchmail's configuration file syntax has
   been criticized as being needlessly difficult to write; instead of
   cleaning up the syntax, the maintainer instead included a GUI
   configuration-file-writing program, leading to comments like:
   
     The punchline is that fetchmail sucks, even if it does have
     giddily-engineered whizbang configurator apps.
     
   The maintainer also ignored dozens of complaints about fetchmail's
   behaviour, stating (by fiat) that fetchmail was bug-free and had
   entered "maintenance mode", allowing him to ignore further bug
   reports.
   
   fetchmail's default configuration values frequently cause lost or
   misdirected mail, and seem to be chosen to cause maximum pain and
   inconvenience. From fetchmail's to-do file (emphasis mine):
   
     Maybe refuse multidrop configuration unless "envelope" is
     _explicitly_ configured ... This would prevent a significant class
     of shoot-self-in-foot problems.
     
     perhaps treat a delivery as "temporarily failed" ... This is so you
     don't lose mail if you configure the wrong envelope header.
     
   fetchmail is famous for mangling messages it retrieves, rather than
   leaving them alone as a mail-handling program should. getmail will add
   trace information to messages (so you can see what happened, and
   when), but will otherwise leave message content alone.
   
   In addition, fetchmail has a long history of security problems:
     * versions released before 20 June 2001 contain a buffer overflow,
       which can be remotely exploited (see
       www.securityfocus.com/bid/2877 for details). getmail is not
       vulnerable to buffer overflows, because buffers in Python are
       dynamically sized.
     * Another remotely-exploitable security hole discovered in fetchmail
       in June 2002; versions prior to 5.9.10 (released in June 2002) are
       exploitable .
     * Reading fetchmail's UPDATES file, it appears that another security
       problem was fixed in 5.9.12, where a server could crash fetchmail
       on 64-bit platforms. Also worrying is a mention that it includes a
       fix for "password shrouding".
     * Another remotely-exploitable security hole in fetchmail discovered
       in September 2002; this hole lets an attacker run arbitrary code
       on the victim's computer.
     * Another remotely-exploitable security hole in fetchmail discovered
       in December 2002; once again, a remote attacker can run arbitrary
       code on the machine running fetchmail in its default
       configuration. See this advisory for details.
     * January 2003: More buffer overflows in fetchmail let attackers run
       arbitrary code .
     * October 2003: Anyone can cause fetchmail to crash by sending you a
       message . Other problems are here , and I might have missed some .
       
   I've given up even trying to stay abreast of the various security
   holes in fetchmail.
   
   But don't just take my word for it; see
   http://docs.freebsd.org/cgi/mid.cgi?200102172349.QAA11724 and
   http://esr.1accesshost.com/.
   
   getmail users have not had to worry about any of these security holes
   or design and implementation errors.
   
Configuring getmail

  What is a "domain mailbox"?
  
   A domain (or multidrop) mailbox is a POP3 mailbox which receives mail
   for all users in a given domain. Normal mailboxes contain mail for a
   single user (like jason@myisp.co.uk); some Internet Service Providers
   which provide webhosting or other services will provide a POP3 mailbox
   which receives mail for all addresses in a given domain (i.e. mail for
   service@smallcompany.net, sales@smallcompany.net, and indeed anything
   @smallcompany.net ends up in the same POP3 mailbox).
   
   getmail provides a method of retrieving mail from a domain mailbox and
   distributing it among the various users automatically. The retriever
   classes MultidropPOP3Retriever, MultidropPOP3SSLRetriever,
   MultidropSDPSRetriever, MultidropIMAPRetriever, and
   MultidropIMAPSSLRetriever provide this capability.
   
  Do I have to run sendmail or another MTA to use getmail?
  
   No. getmail delivers directly to maildirs, mboxrd files, or via
   arbitrary MDAs, and never injects mail via SMTP, so no MTA is
   necessary.
   
  What's a maildir?
  
   A maildir is a mail storage format invented by D. J. Bernstein (author
   of qmail) that requires no file locking to deliver to safely and
   reliably, even over NFS. getmail natively supports delivery to
   maildirs.
   
   See http://qmail.org/man/man5/maildir.html and
   http://cr.yp.to/proto/maildir.html for details.
   
  What's "mboxrd" format?
  
   There are various sub-types of the mbox mail storage format. mboxrd is
   the most reliable of them, though (like all mbox types) it still
   relies on file locking and is therefore more easily corrupted than
   maildir format. In particular, using mbox files with multiple writers
   over NFS can be problematic.
   
   For details on the differences between the various mbox sub-types, see
   http://qmail.org/man/man5/mbox.html.
   
  This rc stuff seems complicated. Does it have to be?
  
   The configuration file format is actually very simple; you don't need
   to worry about most of it if you're not interested in using those
   features. The simplest and most common getmail rc file configuration
   will be for users who want to retrieve all mail from a single-user
   POP3 mailbox, deliver those messages to a maildir or mbox file, and
   delete the mail from the server. For maildir, that configuration is:
[options]
delete = True

[retriever]
type = SimplePOP3Retriever
server = my-pop3-servername
username = my-pop3-username
password = my-pop3-password

[destination]
type = Maildir
path = ~/Maildir/

   For an mbox file, that configuration is:
[options]
delete = True

[retriever]
type = SimplePOP3Retriever
server = my-pop3-servername
username = my-pop3-username
password = my-pop3-password

[destination]
type = Mboxrd
path = ~/inbox

How do I ...

  How do I stop getmail adding a Delivered-To: header to messages?
  
   Use the delivered_to [options] parameter.
   
  How do I stop getmail adding a Received: header to messages?
  
   Use the received [options] parameter.
   
  How do I make getmail deliver messages by re-injecting with SMTP?
  
   You don't need to. getmail can deliver to maildirs, mboxrd files, or
   through arbitrary external MDAs.
   
   If you still think you need to, you can use getmail's external MDA
   support to do so.
   
  How do I make getmail deliver messages to an mh folder?
  
   mh clients (and nmh, or "new mh" clients) include a command for
   delivering a message into your mh folder. In nmh, this command is
   called rcvstore. You use it as an external message delivery agent
   (MDA) with getmail's MDA_external destination. Ensure your
   $HOME/.mh_profile file is configured properly; getmail user Frankye
   Fattarelli suggests a line like the following is necessary to indicate
   the path to your mh mail root:
Path: Mail

   Then use MDA_external like this (which, after adjusting the path of
   the command to reflect your mh/nmh installation, should work with
   either mh or nmh):
[destination]
type = MDA_external
path = /usr/local/libexec/nmh/rcvstore
arguments = ("+inbox", )

   Thanks to Frankye Fattarelli for contributing this answer.
   
  How do I run getmail in "daemon" mode?
  
   Use your system's cron utility to run getmail periodically if you wish
   to have mail retrieved automatically at intervals. This is precisely
   what cron is designed to do; there's no need to add special code to
   getmail to do this.
   
  How do I make getmail retrieve mail from Hotmail?
  
   Well, you could write a retriever that speaks Hotmail's proprietary,
   undocumented, and unsupported access protocol (or pay me to write
   one), or simply set up the POP3 proxy from the httpmail package, and
   have getmail retrieve mail from that POP3 proxy.
   
Using getmail with other software

   getmail user Frankye Fattarelli contributed to the following questions
   about integrating getmail with SpamAssassin and ClamAV.
   
  How do I use SpamAssassin with getmail?
  
   SpamAssassin can be run in standalone mode or in a client/server
   configuration. In both configurations, SpamAssassin accepts a wide
   variety of arguments; please refer to SpamAssassin's manual pages or
   online documentation for details.
   
   To filter messages through SpamAssassin in a client/server
   configuration (i.e. with the spamd daemon), use a configuration like
   this:
[filter]
type = Filter_external
path = /usr/local/bin/spamc
arguments = ("-s 10000", )

   The value supplied to the -s option is the maximum message size
   accepted (in bytes). The default is 250k.
   
   A similar configuration without the spamd daemon would be:
[filter]
type = Filter_external
path = /usr/local/bin/spamassassin
arguments = ("--report", )

   The --report option sends the message to the various spam-blocker
   databases and tags it as spam in your bayesian database.
   
   Note that if you are using Bayesian (learning) filtering, and you've
   put your SpamAssassin filter after any getmail Filter_classifier, you
   may have a problem with your learning filter learning getmail's header
   fields. That is, the headers added by the other filters may get
   learned, and affect your database. To prevent this, ensure that
   SpamAssassin ignores these fields by adding the following to your
   SpamAssassin configuration:
bayes_ignore_header X-getmail-filter-classifier

  How do I use ClamAV with getmail?
  
   ClamAV, like SpamAssassin, can by used in standalone or client/server
   configurations. In either case, you need to add the StreamSaveToDisk
   option to your clamav.conf file to enable scanning from stdin.
   
   To use ClamAV without the clamd daemon, use a filter configuration
   like this:
[filter]
type = Filter_classifier
path = /usr/local/bin/clamscan
arguments = ("--stdout", "--no-summary",
    "--mbox", "--infected", "-")
exitcodes_drop = (1,)

   The above assumes you do not want the infected emails to be delivered.
   If you do want them delivered, you would use a slightly different
   configuration:
[filter]
type = Filter_classifier
path = /usr/local/bin/clamscan
arguments = ("--stdout", "--no-summary",
    "--mbox", "--infected", "-")
exitcodes_keep = (0,1)

   To use ClamAV with the clamd daemon, use a filter configuration like
   this:
[filter]
type = Filter_classifier
path = /usr/local/bin/clamdscan
arguments = ("--stdout", "--disable-summary", "-")
exitcodes_drop = (1, )

   As with Clamscan (above), if you do want the infected messages
   delivered instead of dropped, you should modify your configuration as
   follows:
[filter]
type = Filter_classifier
path = /usr/local/bin/clamdscan
arguments = ("--stdout", "--disable-summary", "-")
exitcodes_keep = (0,1)

   You may find it necessary to specify the paths of some decompression
   utilities used by ClamAV with additional arguments like:
arguments = ( ...,
    "--unzip=/usr/local/bin/unzip",
    "--unrar=/usr/local/bin/unrar",
    "--unarj=/usr/local/bin/unarj",
    "--lha=/usr/local/bin/lha",
    "--jar=/usr/local/bin/unzip",
    "--tar=/usr/bin/tar",
    "--tgz=/usr/bin/tar"

   Note: if you want to use the daemonized (client/server) version of
   ClamAV, ensure that your clamav.conf file contains:
ScanMail

   The paths to the various decompression utilities must be specified in
   this file as well.
   
   See the following mailing list message from Frankye Fattarelli for
   additional notes on using ClamAV with getmail:
   http://marc.theaimsgroup.com/?l=getmail&m=109128345509273&w=2
   
    Getting prettier output from ClamAV
    
   Using getmail's Filter_classifier, the output of your filtering
   program (in this case ClamAV) is placed into a
   X-getmail-filter-classifier: header field in the message. This can
   make auditing the actions of filters difficult if you use multiple
   filters and cannot tell which filter added which line.
   
   To correct this, you can use an additional filter to change the name
   of the added filter header lines immediately after each filter is run.
   For example, reformail, from the maildrop package (which is in turn
   part of the Courier MTA ) can be used in this fashion to rename the
   added header fields (say, to "X-mypersonalmailscan") with a filter
   configuration like this:
type = Filter_external
path = /usr/local/bin/reformail
arguments = ("-R", "X-getmail-filter-classifier:",
    "X-mypersonalmailscan:")

   Simply ensure ClamAV is invoked as the first filter, and this is
   invoked as the second filter (or immediately after the ClamAV filter,
   if it is the second, third, etc. filter).
   
  How do I use procmail with getmail?
  
   Simply invoke procmail as an external MDA. procmail requires that the
   message begin with a Unix "From " line (the mbox message delimiter),
   so you'll need to either set the MDA_external parameter unixfrom to
   True, or supply arguments that tell procmail to recreate this line.
   One of the following would be fine:
[destination]
type = MDA_external
path = /path/to/procmail
arguments = ("-f", "%(sender)")

   Or:
[destination]
type = MDA_external
path = /path/to/procmail
unixfrom = True

  How do I use maildrop with getmail?
  
   Simply invoke maildrop as an external MDA. maildrop requires that the
   message begin with a Unix "From " line (the mbox message delimiter),
   so you'll need to either set the MDA_external parameter unixfrom to
   True, or supply arguments that tell maildrop to recreate this line.
   One of the following would be fine:
[destination]
type = MDA_external
path = /path/to/maildrop
arguments = ("-f", "%(sender)")

   Or:
[destination]
type = MDA_external
path = /path/to/maildrop
unixfrom = True

   If you want to specify a maildrop rc file as one of its arguments,
   that would be something like:
[destination]
type = MDA_external
path = /path/to/maildrop
arguments = ("-f", "%(sender)", "~/.maildroprc")

  How do I use TMDA with getmail?
  
   Simply use the Filter_TMDA module as a message filter:
[filter-X]
type = Filter_TMDA

   See the documentation for details on optional parameters to the
   Filter_TMDA module.
